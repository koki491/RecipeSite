<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespaceには対応するMapperインターフェースの完全修飾クラス名を指定 -->
<mapper namespace="recipeSite.mapper.RecipeMapper">
    <!-- MapperインターフェースのfindAll関数実行時のSQL
    resultTypeには取得結果をマッピングするクラスを指定 -->
    <select id="findById" resultType="recipeSite.domain.Recipe">
        select
        cooking_name,
        cooking_image,
        cooking_recipe
        from recipes
        where id = #{id}
    </select>
    <select id="findByLargeSmallId" resultType="recipeSite.domain.Recipe">
        select
        recipes.id,
        cooking_name,
        cooking_image,
        cooking_recipe
        from recipes
        LEFT JOIN small_category
        ON recipes.small_category_id = small_category.id
        LEFT JOIN large_category
        ON large_category.id = small_category.large_category_id
        where small_category.large_category_id = #{large_category_id}
        AND recipes.small_category_id = #{small_category_id}
    </select>
    <select id="findByName" resultType="recipeSite.domain.Recipe">
        select
        id,
        cooking_name,
        cooking_image,
        cooking_recipe
        from recipes
        where cooking_name LIKE '%${cooking_name}%'
    </select>
    <!-- Mapperインターフェースのsave関数実行時のSQL
    新規で作成する場合はinsert要素を使用する -->
    <insert id="save" parameterType="recipeSite.domain.Recipe">
        INSERT INTO recipes (user_id, cooking_name, cooking_image, cooking_recipe, small_category_id)
        VALUES (#{user_id}, #{cooking_name}, #{cooking_image}, #{cooking_recipe}, #{small_category_id})
    </insert>

    <update id="update" parameterType="recipeSite.domain.Recipe">
        UPDATE recipes SET cooking_recipe = #{cooking_recipe}
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="recipeSite.domain.Recipe">
        DELETE FROM recipes WHERE id = #{id}
    </delete>
</mapper>
